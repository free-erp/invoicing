package org.free_erp.service.dao.base;import java.util.Collection;import java.util.List;import org.springframework.orm.hibernate3.support.HibernateDaoSupport;import java.util.ArrayList;import java.util.Set;import java.util.Vector;import org.free_erp.service.entity.base.Company;import org.free_erp.service.entity.base.Customer;import org.free_erp.service.entity.base.CustomerCatalog;import org.free_erp.service.entity.base.Employee;import org.free_erp.service.entity.base.EmployeeCatalog;import org.free_erp.service.entity.base.Product;import org.free_erp.service.entity.base.ProductCatalog;import org.free_erp.service.entity.base.Storage;import org.free_erp.service.entity.storage.CheckStorageDetailPo;import org.free_erp.service.entity.storage.CheckStoragePo;import org.free_erp.service.entity.storage.InStorageDetailPo;import org.free_erp.service.entity.storage.InStoragePo;import org.free_erp.service.entity.storage.InitialStorageDetailPo;import org.free_erp.service.entity.storage.InitialStoragePo;import org.free_erp.service.entity.storage.LossStorageDetailPo;import org.free_erp.service.entity.storage.LossStoragePo;import org.free_erp.service.entity.storage.MinMaxStorageDetailPo;import org.free_erp.service.entity.storage.MinMaxStoragePo;import org.free_erp.service.entity.storage.MoveStorageDetailPo;import org.free_erp.service.entity.storage.MoveStoragePo;import org.free_erp.service.entity.storage.OutStorageDetailPo;import org.free_erp.service.entity.storage.OutStoragePo;import org.free_erp.service.entity.storage.OutflowStorageDetailPo;import org.free_erp.service.entity.storage.OutflowStoragePo;import org.free_erp.service.entity.storage.PriceStorageDetailPo;import org.free_erp.service.entity.storage.PriceStoragePo;import org.free_erp.service.entity.storage.StorageAlertPo;import org.free_erp.service.entity.storage.StorageChangeLog;import org.free_erp.service.entity.storage.StorageProductPo;import org.free_erp.service.entity.vo.DataBaseQueryVO;import org.free_erp.service.entity.vo.StorageQueryVo;import org.free_erp.service.exception.InitialLackedException;import org.free_erp.service.exception.ProductInitializedException;import org.hibernate.Session;import org.hibernate.Transaction;/** * * @Changer liufei */public class BaseDaoImpl extends HibernateDaoSupport implements ICustomerDao, IProductDao, IStorageDao, IEmployeeDao,DaoUtilities {    public Transaction beginDaoTransaction() {        return this.getSession().beginTransaction();        //return this.getHibernateTemplate().getSessionFactory().openSession().beginTransaction();    }    public void deleteObject(Object po) {        this.getHibernateTemplate().delete(po);    }    public Object findObject(Class<?> clz, int id) {        return this.getHibernateTemplate().get(clz, id);    }    public void saveObject(Object po) {        this.getHibernateTemplate().saveOrUpdate(po);    }    public List<?> findObjects(String sql, Object[] params) {        return this.getHibernateTemplate().find(sql, params);    }    public List<?> find(String queryString, Object[] args) {        return this.getHibernateTemplate().find(queryString, args);    }    public List<?> find(String queryString) {        return this.getHibernateTemplate().find(queryString);    }           //employee    public List<EmployeeCatalog> findEmployeeCatalogs(Company company) {                return (List<EmployeeCatalog>) this.getHibernateTemplate().find("from EmployeeCatalog as catalog where catalog.company =?", new Object[]{company});    }    public List<Employee> findEmployees(Company company)    {                return (List<Employee>) this.getHibernateTemplate().find("from Employee as employee where employee.company =? ", new Object[]{company});    }    public List<Employee> findUsableEmployees(Company company)//liufei    {        return (List<Employee>) this.getHibernateTemplate().find("from Employee as employee where employee.company =? and status =0 ", new Object[]{company});    }    public List<Employee> findEmployees(Company company, String name)    {        return (List<Employee>) this.getHibernateTemplate().find("from Employee as employee where employee.company =? and employee.name=?", new Object[]{company, name});    }    public void deleteEmployeeCatalog(EmployeeCatalog catalog) {        Transaction transation = this.getSession().beginTransaction();        try {            List<Employee> employees = this.getHibernateTemplate().find("from Employee as employee where employee.catalog=?", new Object[]{catalog});            for (Employee employee : employees) {                this.getHibernateTemplate().delete(employee);            }            this.getHibernateTemplate().delete(catalog);            transation.commit();        } catch (Exception ex) {            transation.rollback();            throw new RuntimeException("删除类别信息出错：" + ex.getMessage());        }            }    public void deleteEmployee(Employee employee) {        this.getHibernateTemplate().delete(employee);    }    public void saveEmployeeCatalog(EmployeeCatalog catalog) {        this.getHibernateTemplate().saveOrUpdate(catalog);    }    public void insertEmployeeCatalog(Company company,String number,String name)//liufei    {        List<EmployeeCatalog> employeeCatalog = (List<EmployeeCatalog>)this.getHibernateTemplate().find("from EmployeeCatalog as catalog where catalog.company=? and catalog.number=? ", new Object[]{company,number});        if(employeeCatalog == null || employeeCatalog.size() == 0)        {            EmployeeCatalog empCatalog = new EmployeeCatalog();            empCatalog.setCompany(company);            empCatalog.setNumber(number);            empCatalog.setName(name);            this.saveEmployeeCatalog(empCatalog);        }    }    public void saveEmployee(Employee employee) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdate(employee);    }    //product    //storage    public void deleteStorage(Storage storage) {        this.getHibernateTemplate().delete(storage);    }    public List<Storage> findStorages(Company company)    {        return this.getHibernateTemplate().find("from Storage as storage where storage.company =? ", new Object[]{company});    }    public List<Storage> findUsableStorages(Company company)//liufei    {        return this.getHibernateTemplate().find("from Storage as storage where storage.company =? and status =0 ", new Object[]{company});    }	 public Storage getStorages(Integer id) {        return (Storage)this.getHibernateTemplate().get(Storage.class, id);    }    public void saveStorage(Storage storage) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdate(storage);    }    public List<InStoragePo> findInStorages(Company company) {        return this.getHibernateTemplate().find("from InStoragePo as inStorage where inStorage.company =?", new Object[]{company});    }    //product    public List<ProductCatalog> findAllProductCatalog(Company company) {        // TODO Auto-generated method stub        return this.getHibernateTemplate().find("from ProductCatalog as catalog where catalog.company =? ", new Object[]{company});//order by catalog.parentId,catalog.id asc    }    public List<Product> findAllProduct(Company company)    {        // TODO Auto-generated method stub        return this.getHibernateTemplate().find("from Product as product where product.company =? ", new Object[]{company});    }    public List<Product> findUsableProducts(Company company)//liufei    {        return this.getHibernateTemplate().find("from Product as product where product.company =? and status =0 ", new Object[]{company});    }    public void saveProductCatalog(ProductCatalog catalog) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdate(catalog);    }    public ProductCatalog getProductCatalog(Company company,String name)//liufei    {        List<ProductCatalog> productCatalog = (List<ProductCatalog>)this.getHibernateTemplate().find("from ProductCatalog as catalog where catalog.company=? and catalog.name=? ", new Object[]{company,name});        if(productCatalog != null && productCatalog.size()>0)        {            return productCatalog.get(0);        }        return null;    }    public void insertProductCatalog(Company company,String number,String name)//liufei    {        List<ProductCatalog> productCatalog = (List<ProductCatalog>)this.getHibernateTemplate().find("from ProductCatalog as catalog where catalog.company=? and catalog.number=? ", new Object[]{company,number});        if(productCatalog == null || productCatalog.size() == 0)        {            ProductCatalog proCatalog = new ProductCatalog();            proCatalog.setCompany(company);            proCatalog.setNumber(number);            proCatalog.setName(name);            this.saveProductCatalog(proCatalog);        }    }    public void saveProduct(Product product) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdate(product);    }    public void deleteProductCatalog(ProductCatalog catalog) {        Transaction transation = this.getSession().beginTransaction();        try        {            List<Product> products = this.getHibernateTemplate().find("from Product as product where product.catalog=?", new Object[]{catalog});            for (Product product : products)            {                this.getHibernateTemplate().delete(product);            }            this.getHibernateTemplate().delete(catalog);            transation.commit();        } catch (Exception ex) {            transation.rollback();            throw new RuntimeException("删除产品类别信息出错：" + ex.getMessage());        }    }    public void deleteProductCatalogs(Collection<ProductCatalog> catalogs) {        // TODO Auto-generated method stub        this.getHibernateTemplate().deleteAll(catalogs);    }    public void deleteProduct(Product product) {        //check exists the product                this.getHibernateTemplate().delete(product);    }    public List<StorageProductPo> findAllStorageProduct(Storage storage)    {        return (List<StorageProductPo>)this.getHibernateTemplate().find("from StorageProductPo as po where po.storage =?", new Object[]{storage});    }    public List<StorageProductPo> findAllStorageProduct(Company company)    {        return (List<StorageProductPo>)this.getHibernateTemplate().find("from StorageProductPo as po where po.company =?", new Object[]{company});    }    public void deleteProducts(Collection<Product> products) {        // TODO Auto-generated method stub        this.getHibernateTemplate().delete(products);    }    public void saveProductCatalogs(Collection<ProductCatalog> catalogs) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdateAll(catalogs);    }    public void saveProducts(Collection<Product> products) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdateAll(products);    }    public ProductCatalog findProductCatalog(int id) {        // TODO Auto-generated method stub        return (ProductCatalog) this.getHibernateTemplate().get(ProductCatalog.class, id);    }    public int getProductCatalogID(Company company,String number)//liufei    {        int catalogID = 0;        List<ProductCatalog> productCatalog = (List<ProductCatalog>)this.getHibernateTemplate().find("from ProductCatalog as catalog where catalog.company=? and catalog.number=? ", new Object[]{company,number});        if(productCatalog != null && productCatalog.size()>0)        {            catalogID = productCatalog.get(0).getId();        }        return catalogID;    }    public CustomerCatalog getCustomerCatalog(Company company,String name)//liufei    {        List<CustomerCatalog> customerCatalog = (List<CustomerCatalog>)this.getHibernateTemplate().find("from CustomerCatalog as catalog where catalog.company=? and catalog.name=? ", new Object[]{company,name});        if(customerCatalog != null && customerCatalog.size()>0)        {            return customerCatalog.get(0);        }        return null;    }    public int getCustomerCatalogID(Company company,String number)//liufei    {        int catalogID = 0;        List<CustomerCatalog> customerCatalog = (List<CustomerCatalog>)this.getHibernateTemplate().find("from CustomerCatalog as catalog where catalog.company=? and catalog.number=? ", new Object[]{company,number});        if(customerCatalog != null && customerCatalog.size()>0)        {            catalogID = customerCatalog.get(0).getId();        }        return catalogID;    }    public int getEmployeeCatalogID(Company company,String number)//liufei    {        int catalogID = 0;        List<EmployeeCatalog> employeeCatalog = (List<EmployeeCatalog>)this.getHibernateTemplate().find("from EmployeeCatalog as catalog where catalog.company=? and catalog.number=? ", new Object[]{company,number});        if(employeeCatalog != null && employeeCatalog.size()>0)        {            catalogID = employeeCatalog.get(0).getId();        }        return catalogID;    }    public EmployeeCatalog getEmployeeCatalog(Company company,String name)//liufei    {        List<EmployeeCatalog> employeeCatalog = (List<EmployeeCatalog>)this.getHibernateTemplate().find("from EmployeeCatalog as catalog where catalog.company=? and catalog.name=? ", new Object[]{company,name});        if(employeeCatalog != null && employeeCatalog.size()>0)        {            return employeeCatalog.get(0);        }        return null;    }    public Product findProduct(int id)    {        return (Product)this.getHibernateTemplate().get(Product.class, id);    }    public void deleteCatalog(int companyId, String no) {        // TODO Auto-generated method stub    }    public void deleteCatalog(int id) {        // TODO Auto-generated method stub    }    public void deleteCustomer(int companyId, String no) {        // TODO Auto-generated method stub    }    public void deleteCustomer(int id) {        // TODO Auto-generated method stub        //this.getHibernateTemplate().delete(entity)    }    public void deleteCustomer(Customer customer) {        this.getHibernateTemplate().delete(customer);    }    public CustomerCatalog findCatalog(int companyId, String no) {        // TODO Auto-generated method stub        return null;    }    public CustomerCatalog findCustomerCatalog(int id) {        // TODO Auto-generated method stub        return (CustomerCatalog) this.getHibernateTemplate().get(CustomerCatalog.class, id);    }    public EmployeeCatalog findEmployeeCatalog(int id)//liufei    {        return (EmployeeCatalog) this.getHibernateTemplate().get(EmployeeCatalog.class, id);    }    public Customer findCustomer(int companyId, int no) {        // TODO Auto-generated method stub        return null;//(Customer)this.getHibernateTemplate().get(C, id);    }    public Customer findCustomer(int id) {        // TODO Auto-generated method stub        return (Customer) this.getHibernateTemplate().get(Customer.class, id);    }    public Storage findStorage(int id)    {        return (Storage)this.getHibernateTemplate().get(Storage.class, id);    }    public List<CustomerCatalog> findCustomerCatalogs(Company company)    {        return (List<CustomerCatalog>) this.getHibernateTemplate().find("from CustomerCatalog as catalog where catalog.company =? ", new Object[]{company});    }    public List<CustomerCatalog> findSupplierCatalogs(Company company)//unused    {        return (List<CustomerCatalog>) this.getHibernateTemplate().find("from CustomerCatalog as catalog where catalog.company =? and ( catalog.customerType =? or catalog.customerType =? )", new Object[]{company ,"2",""});    }    public List<Customer> findCustomers(Company company)    {        return (List<Customer>) this.getHibernateTemplate().find("from Customer as customer where customer.company =?", new Object[]{company});    }    public List<Customer> findSuppliers(Company company)//unused    {        return (List<Customer>) this.getHibernateTemplate().find("from Customer as customer where customer.company =? and ( customer.customerType = ? or customer.customerType = ? or customer.customerType = ?)", new Object[]{company ,"供应商", "客户及供应商",""});    }    public List<Customer> findUsableCustomers(Company company)//liufei    {        return (List<Customer>) this.getHibernateTemplate().find("from Customer as customer where customer.company =? and status =0 ", new Object[]{company});    }    public List<Customer> findUsableSuppliers(Company company)//liufei unused    {        return (List<Customer>) this.getHibernateTemplate().find("from Customer as customer where customer.company =? and status =0 and ( customer.customerType = ? or customer.customerType = ? or customer.customerType = ?)", new Object[]{company ,"供应商" ,"客户及供应商","null"});    }    public boolean isCatalogNumberValid(int companyId, String no) {        // TODO Auto-generated method stub        return true;    }    public boolean isCustomerNumberValid(int companyId, String no) {        // TODO Auto-generated method stub        return true;    }    public void saveCustomerCatalog(CustomerCatalog catalog) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdate(catalog);    }    public void insertCustomerCatalog(Company company,String number,String name)//liufei    {        List<CustomerCatalog> customerCatalog = (List<CustomerCatalog>)this.getHibernateTemplate().find("from CustomerCatalog as catalog where catalog.company=? and catalog.number=? ", new Object[]{company,number});        if(customerCatalog == null || customerCatalog.size() == 0)        {            CustomerCatalog cusCatalog = new CustomerCatalog();            cusCatalog.setCompany(company);            cusCatalog.setNumber(number);            cusCatalog.setName(name);            this.saveCustomerCatalog(cusCatalog);        }    }    public void saveCustomer(Customer customer) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdate(customer);    }    public void saveOrUpdateCustomerCatalog(CustomerCatalog catalog) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdate(catalog);    }    public void saveOrUpdateCustomer(Customer customer) {        // TODO Auto-generated method stub        this.getHibernateTemplate().saveOrUpdate(customer);    }    public void deleteCustomerCatalog(CustomerCatalog catalog) {        Transaction transation = this.getSession().beginTransaction();        try {            List<Customer> customers = this.getHibernateTemplate().find("from Customer as customer where customer.catalog=?", new Object[]{catalog});            for (Customer customer : customers) {                this.getHibernateTemplate().delete(customer);            }            this.getHibernateTemplate().delete(catalog);            transation.commit();        } catch (Exception ex) {            transation.rollback();            throw new RuntimeException("删除类别信息出错：" + ex.getMessage());        }    }    public void deleteInStorageForm(InStoragePo po) {//		Session session = this.getHibernateTemplate().getSessionFactory().openSession();//		Transaction transaction = session.beginTransaction();//		try//		{////			Set<InStorageDetailPo> details = po.getDetails();////			for(InStorageDetailPo p:details)////			{////				session.delete(p);////			}//			//po.getDetails().clear();////			po.getDetails().clear();////			session.save(po);////			session.flush();//			session.delete(po);//			session.flush();//			transaction.commit();//			session.close();//		}//		catch(Exception ex)//		{//			transaction.rollback();//			throw new RuntimeException("delete failed exception:" + ex.getMessage());//		}        //this.getHibernateTemplate().delete(po);		//临时做法，级联删除当前存在点问题，以后再改        Session session = this.getHibernateTemplate().getSessionFactory().openSession();        Set<InStorageDetailPo> details = po.getDetails();        for(InStorageDetailPo p:details)        {            session.delete(p);        }        session.clear();        details.clear();        this.getHibernateTemplate().delete(po);    }    public void deleteInitialStorageForm(InitialStoragePo po) {        //临时做法，级联删除当前存在点问题，以后再改        Session session = this.getHibernateTemplate().getSessionFactory().openSession();        Set<InitialStorageDetailPo> details = po.getDetails();        for(InitialStorageDetailPo p:details)        {            session.delete(p);        }        session.clear();        details.clear();        this.getHibernateTemplate().delete(po);    }    public void deleteLossStorageForm(LossStoragePo po) {        //临时做法，级联删除当前存在点问题，以后再改        Session session = this.getHibernateTemplate().getSessionFactory().openSession();        Set<LossStorageDetailPo> details = po.getDetails();        for(LossStorageDetailPo p:details)        {            session.delete(p);        }        session.clear();        details.clear();        this.getHibernateTemplate().delete(po);    }    public void deleteMinMaxStorageForm(MinMaxStoragePo po) {			//临时做法，级联删除当前存在点问题，以后再改        Session session = this.getHibernateTemplate().getSessionFactory().openSession();        Set<MinMaxStorageDetailPo> details = po.getDetails();        for(MinMaxStorageDetailPo p:details)        {            session.delete(p);        }        session.clear();        details.clear();        this.getHibernateTemplate().delete(po);    }    public void deleteMoveStorageForm(MoveStoragePo po) {			//临时做法，级联删除当前存在点问题，以后再改        Session session = this.getHibernateTemplate().getSessionFactory().openSession();        Set<MoveStorageDetailPo> details = po.getDetails();        for(MoveStorageDetailPo p:details)        {            session.delete(p);        }        session.clear();        details.clear();        this.getHibernateTemplate().delete(po);    }    public void deleteOutStorageForm(OutStoragePo po) {			//临时做法，级联删除当前存在点问题，以后再改        Session session = this.getHibernateTemplate().getSessionFactory().openSession();        Set<OutStorageDetailPo> details = po.getDetails();        for(OutStorageDetailPo p:details)        {            session.delete(p);        }        session.clear();        details.clear();        this.getHibernateTemplate().delete(po);    }    public void deleteOutflowStorageForm(OutflowStoragePo po) {			//临时做法，级联删除当前存在点问题，以后再改        Session session = this.getHibernateTemplate().getSessionFactory().openSession();        Set<OutflowStorageDetailPo> details = po.getDetails();        for(OutflowStorageDetailPo p:details)        {            session.delete(p);        }        session.clear();        details.clear();        this.getHibernateTemplate().delete(po);    }    public void deletePriceStorageForm(PriceStoragePo po) {			//临时做法，级联删除当前存在点问题，以后再改        Session session = this.getHibernateTemplate().getSessionFactory().openSession();        Set<PriceStorageDetailPo> details = po.getDetails();        for(PriceStorageDetailPo p:details)        {            session.delete(p);        }        session.clear();        details.clear();        this.getHibernateTemplate().delete(po);    }    public List<InStoragePo> getAllInStorageForms(Company company) {        return this.getHibernateTemplate().find("from InStoragePo as inStorage where inStorage.company =?", new Object[]{company});    //throw new UnsupportedOperationException("Not supported yet.");    }    public List<InitialStoragePo> getAllInitialStorageForms(Company company) {        return this.getHibernateTemplate().find("from InitialStoragePo as s where s.company =?", new Object[]{company});    }    public List<LossStoragePo> getAllLossStorageForms(Company company) {        return this.getHibernateTemplate().find("from LossStoragePo as s where s.company =?", new Object[]{company});    }    public List<MinMaxStoragePo> getAllMinMaxStorageForms(Company company) {        return this.getHibernateTemplate().find("from MinMaxStoragePo as s where s.company =?", new Object[]{company});    }    public List<MoveStoragePo> getAllMoveStorageForms(Company company) {         List<MoveStoragePo> pos = this.getHibernateTemplate().find("from MoveStoragePo as s where s.company =?", new Object[]{company});        for(MoveStoragePo p:pos)        {            p.setOutStorage(this.getStorages(p.getOutStorageId()));        }        return pos;    }    public List<OutStoragePo> getAllOutStorageForms(Company company) {        return this.getHibernateTemplate().find("from OutStoragePo as s where s.company =?", new Object[]{company});    }    public List<OutflowStoragePo> getAllOutflowStorageForms(Company company) {        return this.getHibernateTemplate().find("from OutflowStoragePo as s where s.company =?", new Object[]{company});    }    public List<PriceStoragePo> getAllPriceStorageForms(Company company) {        return this.getHibernateTemplate().find("from PriceStoragePo as s where s.company =?", new Object[]{company});    }    public void saveInStorageForm(InStoragePo po) {        for(InStorageDetailPo p:po.getDetails())		{            if (p.getMainObject() == null)            {                p.setMainObject(po);            }   		}       this.getHibernateTemplate().saveOrUpdate(po);    }    public void saveInitialStorageForm(InitialStoragePo po) {       for(InitialStorageDetailPo p:po.getDetails())		{			 if (p.getMainObject() == null)            {                p.setMainObject(po);            }        }        this.getHibernateTemplate().saveOrUpdate(po);    }    public void saveLossStorageForm(LossStoragePo po) {                for(LossStorageDetailPo p:po.getDetails())		{			if (p.getMainObject() == null)            {                p.setMainObject(po);            }        }        this.getHibernateTemplate().saveOrUpdate(po);    }    public void saveMinMaxStorageForm(MinMaxStoragePo po) {               for(MinMaxStorageDetailPo p:po.getDetails())		{			if (p.getMainObject() == null)            {                p.setMainObject(po);            }        }        this.getHibernateTemplate().saveOrUpdate(po);    }    public void saveMoveStorageForm(MoveStoragePo po) {                for(MoveStorageDetailPo p:po.getDetails())		{			 if (p.getMainObject() == null)            {                p.setMainObject(po);            }        }        po.setOutStorageId(po.getOutStorage().getId());//to be added        this.getHibernateTemplate().saveOrUpdate(po);    }    public void saveOutStorageForm(OutStoragePo po) {        		for(OutStorageDetailPo p:po.getDetails())		{			 if (p.getMainObject() == null)            {                p.setMainObject(po);            }        }        this.getHibernateTemplate().saveOrUpdate(po);    }    public void saveOutflowStorageForm(OutflowStoragePo po) {        for(OutflowStorageDetailPo p:po.getDetails())		{			 if (p.getMainObject() == null)            {                p.setMainObject(po);            }        }        this.getHibernateTemplate().saveOrUpdate(po);    }    public void savePriceStorageForm(PriceStoragePo po) {        for(PriceStorageDetailPo p:po.getDetails())		{			if (p.getMainObject() == null)            {                p.setMainObject(po);            }        }        this.getHibernateTemplate().saveOrUpdate(po);    }    public void deleteCheckStorage(CheckStoragePo po) {		//临时做法，级联删除当前存在点问题，以后再改        Session session = this.getHibernateTemplate().getSessionFactory().openSession();        Set<CheckStorageDetailPo> details = po.getDetails();        for(CheckStorageDetailPo p:details)        {            session.delete(p);        }        session.clear();        details.clear();        this.getHibernateTemplate().delete(po);    }    public List<CheckStoragePo> getAllCheckStorages(Company company) {        return this.getHibernateTemplate().find("from CheckStoragePo as s where s.company =?", new Object[]{company});    }    public void saveCheckStorage(CheckStoragePo po) {        for(CheckStorageDetailPo p:po.getDetails())		{			p.setMainObject(po);//po);								}        this.getHibernateTemplate().saveOrUpdate(po);    }	public StorageProductPo getStorageProduct(Company company, String productNo) {		List<StorageProductPo> pos = this.getHibernateTemplate().find("from StorageProductPo as s where s.company =? and s.number=?", new Object[]{company, productNo});		if (pos != null && pos.size() > 0)		{			return pos.get(0);		}		return null;	}    public double getStorageProductAmount(Storage storage, Product product) {        StorageProductPo po = this.findStorageProduct(storage, product);        if (po != null)        {             return po.getAmount();        }        return 0d;    }//	public StorageProductPo getStorageProduct(Integer id) {//		return (StorageProductPo)this.getHibernateTemplate().get(StorageProductPo.class, id);//	}    /**     * 当在事务中反复查询某些商品的库存时候，请用后面的方法 public List<StorageProductPo> findStorageProductPos(Storage storage, List<Product> products)     * 不然会产生lock异常     * @param storage     * @param product     * @return     */	public StorageProductPo findStorageProduct(Storage storage, Product product)	{		List<StorageProductPo> sps = this.getHibernateTemplate().find("from StorageProductPo as s where s.storage=? and  s.product=?", new Object[]{storage, product});		if (sps != null && sps.size() > 0)		{			return sps.get(0);		}		return null;	}    public List<StorageProductPo> findStorageProductPos(Storage storage, List<Product> products)    {        String sqlString = "from StorageProductPo as s where s.storage=? and (";        Object[] args = new Object[products.size() + 1];        int i = 0;        args[0] = storage;        for(Product product:products)        {            if (i > 0)            {                sqlString += " or ";            }            sqlString += " s.product=?";            i++;            args[i] = product;        }        sqlString += ")";        List<StorageProductPo> sps = this.getHibernateTemplate().find(sqlString, args);		return sps;    }    public StorageAlertPo findStorageAlert(Storage storage,Product product)//liufei    {        List<StorageAlertPo> storageAlertPo = this.getHibernateTemplate().find("from StorageAlertPo as po where po.storage=? and po.product=? ", new Object[]{storage,product});		if (storageAlertPo != null && storageAlertPo.size() > 0)		{			return storageAlertPo.get(0);		}		return null;    }	public List<StorageProductPo> getStorageProducts(Company company) {		return this.getHibernateTemplate().find("from StorageProductPo as s where s.company =?", new Object[]{company});	}	public List<StorageProductPo> getStorageProducts(Company company, String name) {		return this.getHibernateTemplate().find("from StorageProductPo as s where s.company =? and s.name like ?", new Object[]{company, "%" + name + "%"});	}	public void saveStorageProduct(StorageProductPo po) {		this.getHibernateTemplate().saveOrUpdate(po);	}    public void saveStorageAlert(StorageAlertPo po)//liufei    {        this.getHibernateTemplate().saveOrUpdate(po);    }	public void passCheckForm(CheckStoragePo po) throws InitialLackedException {        Session session = this.getHibernateTemplate().getSessionFactory().openSession();		Set<CheckStorageDetailPo> details = po.getDetails();        List<Product> products = new ArrayList();        for(CheckStorageDetailPo p:details)        {            products.add(p.getProduct());        }        List<StorageProductPo> storageProducts = this.findStorageProductPos(po.getStorage(), products);        Transaction transaction = session.beginTransaction();		for(CheckStorageDetailPo p:details)		{			StorageProductPo storageProduct = this.findStorageProduct(storageProducts, p.getProduct());            StorageChangeLog storageChangeLog = new StorageChangeLog();            storageChangeLog.setCompany(po.getCompany());            storageChangeLog.setStorage(po.getStorage());            storageChangeLog.setProduct(p.getProduct());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setChangeType("盘点管理");//		Session session = this.getHibernateTemplate().getSessionFactory().openSession();//		Transaction transaction = session.beginTransaction();//		Set<CheckStorageDetailPo> details = po.getDetails();//		for(CheckStorageDetailPo p:details)//		{//			StorageProductPo storageProduct = this.findStorageProduct(po.getStorage(), p.getProduct());			if (storageProduct == null)			{				transaction.rollback();				session.close();				throw new InitialLackedException(p.getProduct().getName(), "此商品尚未期初!");			}            storageChangeLog.setCurrentAmount(storageProduct.getAmount());            storageChangeLog.setCurrentPrice(storageProduct.getPrice());			//业务部分			storageProduct.setAmount(p.getAmount());			storageProduct.setPrice(p.getPrice());            storageChangeLog.setChangedAmount(storageProduct.getAmount());            storageChangeLog.setChangedPrice(storageProduct.getPrice());            try			{				session.saveOrUpdate(storageProduct);                session.save(storageChangeLog);			}			catch(Exception ex)			{				transaction.rollback();				session.close();				throw new RuntimeException("无法保存!:" + ex.getMessage());			}            //**************//liufei//            CheckStorageDetailPo checkStorageDetailPo = this.findCheckStorageDetail(po.getStorage(), id);//??????????????????//            if(checkStorageDetailPo != null)//            {//                checkStorageDetailPo.setOldAmount(p.getAmount());//                session.saveOrUpdate(checkStorageDetailPo);//            }            //**************//		}		session.flush();		transaction.commit();		session.close();	}	public void passInStorageForm(InStoragePo po) throws InitialLackedException {        Session session = this.getHibernateTemplate().getSessionFactory().openSession();		Set<InStorageDetailPo> details = po.getDetails();        List<Product> products = new ArrayList();        for(InStorageDetailPo p:details)        {            products.add(p.getProduct());        }        List<StorageProductPo> storageProducts = this.findStorageProductPos(po.getStorage(), products);        Transaction transaction = session.beginTransaction();		for(InStorageDetailPo p:details)		{			StorageProductPo storageProduct = this.findStorageProduct(storageProducts, p.getProduct());            StorageChangeLog storageChangeLog = new StorageChangeLog();            storageChangeLog.setCompany(po.getCompany());            storageChangeLog.setStorage(po.getStorage());            storageChangeLog.setProduct(p.getProduct());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setChangeType("商品入库");//		Session session = this.getHibernateTemplate().getSessionFactory().openSession();//		Transaction transaction = session.beginTransaction();//		Set<InStorageDetailPo> details = po.getDetails();//		for(InStorageDetailPo p:details)//		{//			StorageProductPo storageProduct = this.findStorageProduct(po.getStorage(),p.getProduct());			if (storageProduct == null)			{				/*				transaction.rollback();				session.close();				throw new InitialLackedException(p.getName(), "此商品尚未期初!");				 */				//入库不限制它仓库中必须含有此信息				storageProduct = new StorageProductPo();                storageProduct.setProduct(p.getProduct());				storageProduct.setCompany(po.getCompany());				storageProduct.setPrice(p.getPrice());				storageProduct.setShelf(p.getShelf());				storageProduct.setStorage(po.getStorage());							}            storageChangeLog.setCurrentAmount(storageProduct.getAmount());            storageChangeLog.setCurrentPrice(storageProduct.getPrice());			//业务部分			double oldAmount = storageProduct.getAmount();			//价格的计算方法,当前用平均法			double totailMoney = storageProduct.getTotailMoney() + p.getTotailMoney();			double newPrice = totailMoney / (oldAmount + p.getAmount());			storageProduct.setAmount(p.getAmount() + oldAmount);			storageProduct.setPrice(newPrice);            storageChangeLog.setChangedAmount(storageProduct.getAmount());            storageChangeLog.setChangedPrice(storageProduct.getPrice());			try			{				session.saveOrUpdate(storageProduct);                session.save(storageChangeLog);			}			catch(Exception ex)			{				transaction.rollback();				session.close();				throw new RuntimeException("无法保存!:" + ex.getMessage());			}		}		session.flush();		transaction.commit();		session.close();	}    private StorageProductPo findStorageProduct( List<StorageProductPo> pos, Product product)    {        for(StorageProductPo p:pos)        {            if (p.getProduct().equals(product))            {                return p;            }        }        return null;    }	public void passInitialStorageForm(InitialStoragePo po) throws ProductInitializedException{		Session session = this.getHibernateTemplate().getSessionFactory().openSession();		Set<InitialStorageDetailPo> details = po.getDetails();        List<Product> products = new ArrayList();        for(InitialStorageDetailPo p:details)        {            products.add(p.getProduct());        }        List<StorageProductPo> storageProducts = this.findStorageProductPos(po.getStorage(), products);        Transaction transaction = session.beginTransaction();		for(InitialStorageDetailPo p:details)		{			StorageProductPo storageProduct = this.findStorageProduct(storageProducts, p.getProduct());            StorageChangeLog storageChangeLog = new StorageChangeLog();            storageChangeLog.setCompany(po.getCompany());            storageChangeLog.setStorage(po.getStorage());            storageChangeLog.setProduct(p.getProduct());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setChangeType("库存期初");			if (storageProduct != null)			{				transaction.rollback();				session.close();				throw new ProductInitializedException(storageProduct, "商品已建期初,不能重复期初!");			}			//业务部分			storageProduct = new StorageProductPo();			storageProduct.setProduct(p.getProduct());			storageProduct.setAmount(p.getAmount());			storageProduct.setPrice(p.getPrice());			storageProduct.setShelf(p.getShelf());            storageProduct.setCompany(po.getCompany());			storageProduct.setStorage(po.getStorage());            storageChangeLog.setChangedAmount(storageProduct.getAmount());            storageChangeLog.setChangedPrice(storageProduct.getPrice());			try			{				session.saveOrUpdate(storageProduct);                session.save(storageChangeLog);			}			catch(Exception ex)			{				transaction.rollback();				session.close();                ex.printStackTrace();				throw new RuntimeException("无法保存!:" + ex.getMessage());			}		}		session.flush();		transaction.commit();		session.close();	}	public void passLossStorageForm(LossStoragePo po) throws InitialLackedException {        Session session = this.getHibernateTemplate().getSessionFactory().openSession();		Set<LossStorageDetailPo> details = po.getDetails();        List<Product> products = new ArrayList();        for(LossStorageDetailPo p:details)        {            products.add(p.getProduct());        }        List<StorageProductPo> storageProducts = this.findStorageProductPos(po.getStorage(), products);        Transaction transaction = session.beginTransaction();		for(LossStorageDetailPo p:details)		{			StorageProductPo storageProduct = this.findStorageProduct(storageProducts, p.getProduct());            StorageChangeLog storageChangeLog = new StorageChangeLog();            storageChangeLog.setCompany(po.getCompany());            storageChangeLog.setStorage(po.getStorage());            storageChangeLog.setProduct(p.getProduct());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setChangeType("库存报损");//		Session session = this.getHibernateTemplate().getSessionFactory().openSession();//		Transaction transaction = session.beginTransaction();//		Set<LossStorageDetailPo> details = po.getDetails();//		for(LossStorageDetailPo p:details)//		{//			StorageProductPo storageProduct = this.findStorageProduct(po.getStorage(),p.getProduct());			if (storageProduct == null)			{				transaction.rollback();				session.close();				throw new InitialLackedException(p.getProduct().getName(), "此商品尚未期初!");			}            storageChangeLog.setCurrentAmount(storageProduct.getAmount());            storageChangeLog.setCurrentPrice(storageProduct.getPrice());			//业务部分			double oldAmount = storageProduct.getAmount();			//价格的计算方法,当前用平均法			double totailMoney = storageProduct.getTotailMoney();            if(oldAmount < p.getAmount())            {                throw new InitialLackedException(p.getProduct().getName(), "此商品库存不足!");            }			storageProduct.setAmount(oldAmount - p.getAmount());            storageChangeLog.setChangedAmount(storageProduct.getAmount());            storageChangeLog.setChangedPrice(storageProduct.getPrice());			try			{				session.saveOrUpdate(storageProduct);                //**************//liufei//                LossStorageDetailPo lossStorageDetailPo = this.findLossStorageDetail(po.getStorage(), id);//                if(lossStorageDetailPo != null)//                {//                    lossStorageDetailPo.setOldAmount(oldAmount - p.getAmount());//                    session.saveOrUpdate(lossStorageDetailPo);//                }                //**************//			}			catch(Exception ex)			{				transaction.rollback();				session.close();				throw new RuntimeException("无法保存!:" + ex.getMessage());			}		}		session.flush();		transaction.commit();		session.close();	}	public void passMinMaxStorageForm(MinMaxStoragePo po) throws InitialLackedException {//liufei		Session session = this.getHibernateTemplate().getSessionFactory().openSession();		Transaction transaction = session.beginTransaction();		Set<MinMaxStorageDetailPo> details = po.getDetails();		for(MinMaxStorageDetailPo p:details)		{			StorageAlertPo storageAlert = this.findStorageAlert(po.getStorage(),p.getProduct());			if (storageAlert == null)			{                storageAlert = new StorageAlertPo();                storageAlert.setCompany(po.getCompany());                storageAlert.setStorage(po.getStorage());                storageAlert.setProduct(p.getProduct());				//transaction.rollback();				//session.close();				//throw new InitialLackedException(p.getName(), "此商品尚未期初!");			}			//业务部分			storageAlert.setMinAmount(p.getMinAmount());			storageAlert.setMaxAmount(p.getMaxAmount());			try			{				session.saveOrUpdate(storageAlert);			}			catch(Exception ex)			{				transaction.rollback();				session.close();				throw new RuntimeException("无法保存!:" + ex.getMessage());			}		}		session.flush();		transaction.commit();		session.close();	}	public void passMoveStorageForm(MoveStoragePo po) throws InitialLackedException{		Session session = this.getHibernateTemplate().getSessionFactory().openSession();				Set<MoveStorageDetailPo> details = po.getDetails();		Storage outStorage = this.getStorages(po.getOutStorageId());		if (outStorage == null)		{			session.close();			throw new RuntimeException("程序没有正确设置移出仓库!");		}		Storage storage = po.getStorage();        //        List<Product> products = new ArrayList();        for(MoveStorageDetailPo p:details)        {            products.add(p.getProduct());        }        List<StorageProductPo> outStorageProducts = this.findStorageProductPos(po.getOutStorage(), products);        List<StorageProductPo> inStorageProducts =  this.findStorageProductPos(po.getStorage(), products);        Transaction transaction = session.beginTransaction();		for(MoveStorageDetailPo p:details)		{			StorageProductPo outStorageProduct = findStorageProduct(outStorageProducts, p.getProduct());            StorageChangeLog outStorageChangeLog = new StorageChangeLog();            outStorageChangeLog.setCompany(po.getCompany());            outStorageChangeLog.setStorage(po.getStorage());            outStorageChangeLog.setProduct(p.getProduct());            outStorageChangeLog.setFormDate(po.getFormDate());            outStorageChangeLog.setFormNumber(po.getNumber());            outStorageChangeLog.setFormDate(po.getFormDate());            outStorageChangeLog.setFormNumber(po.getNumber());            outStorageChangeLog.setChangeType("移库管理");			if (outStorageProduct == null) //移出库商品不存在			{				transaction.rollback();				session.close();				throw new RuntimeException("移出库不存在此种商品!" + p.getProduct().getName());			}            outStorageChangeLog.setCurrentAmount(outStorageProduct.getAmount());            outStorageChangeLog.setCurrentPrice(outStorageProduct.getPrice());			StorageProductPo storageProduct =  findStorageProduct(inStorageProducts, p.getProduct());            StorageChangeLog storageChangeLog = new StorageChangeLog();            storageChangeLog.setCompany(po.getCompany());            storageChangeLog.setStorage(po.getStorage());            storageChangeLog.setProduct(p.getProduct());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setChangeType("移库管理");			if (storageProduct == null) //进行期初!			{				storageProduct = new StorageProductPo();				storageProduct.setCompany(outStorageProduct.getCompany());				storageProduct.setPrice(p.getPrice());//liufei				storageProduct.setShelf(outStorageProduct.getShelf());				storageProduct.setStorage(storage);                storageProduct.setProduct(p.getProduct());				storageProduct.setAmount(p.getAmount());                storageChangeLog.setChangedAmount(storageProduct.getAmount());                storageChangeLog.setChangedPrice(storageProduct.getPrice());			}			else //存在商品			{                storageChangeLog.setCurrentAmount(storageProduct.getAmount());                storageChangeLog.setCurrentPrice(storageProduct.getPrice());				double oldAmount = storageProduct.getAmount();				storageProduct.setAmount(oldAmount + p.getAmount());				storageProduct.setPrice(storageProduct.getTotailMoney()/storageProduct.getAmount());                storageChangeLog.setChangedAmount(storageProduct.getAmount());                storageChangeLog.setChangedPrice(storageProduct.getPrice());			}			//减掉移出库库存			outStorageProduct.setAmount(outStorageProduct.getAmount() - p.getAmount());            outStorageChangeLog.setChangedAmount(outStorageProduct.getAmount());            outStorageChangeLog.setChangedPrice(outStorageProduct.getPrice());			if (outStorageProduct.getAmount() < 0)			{				transaction.rollback();				session.close();				throw new RuntimeException("移出库库存数量不足:" + p.getProduct().getName());			}			try			{				session.saveOrUpdate(storageProduct);				session.saveOrUpdate(outStorageProduct);                session.save(outStorageChangeLog);                session.save(storageChangeLog);			}			catch(Exception ex)			{				transaction.rollback();				session.close();				throw new RuntimeException("无法保存!:" + ex.getMessage());			}		}		session.flush();		transaction.commit();		session.close();	}    	public void passOutStorageForm(OutStoragePo po) throws InitialLackedException {        Session session = this.getHibernateTemplate().getSessionFactory().openSession();		Set<OutStorageDetailPo> details = po.getDetails();        List<Product> products = new ArrayList();        for(OutStorageDetailPo p:details)        {            products.add(p.getProduct());        }        List<StorageProductPo> storageProducts = this.findStorageProductPos(po.getStorage(), products);        Transaction transaction = session.beginTransaction();		for(OutStorageDetailPo p:details)		{			StorageProductPo storageProduct = this.findStorageProduct(storageProducts, p.getProduct());            StorageChangeLog storageChangeLog = new StorageChangeLog();            storageChangeLog.setCompany(po.getCompany());            storageChangeLog.setStorage(po.getStorage());            storageChangeLog.setProduct(p.getProduct());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setChangeType("商品出库");//		Session session = this.getHibernateTemplate().getSessionFactory().openSession();//		Transaction transaction = session.beginTransaction();//		Set<OutStorageDetailPo> details = po.getDetails();//		for(OutStorageDetailPo p:details)//		{//			StorageProductPo storageProduct = this.findStorageProduct(po.getStorage(), p.getProduct());			if (storageProduct == null)			{				transaction.rollback();				session.close();				throw new InitialLackedException(p.getProduct().getName(), "此商品尚未期初!");			}			//业务部分            storageChangeLog.setCurrentAmount(storageProduct.getAmount());            storageChangeLog.setCurrentPrice(storageProduct.getPrice());			double oldAmount = storageProduct.getAmount();			double totailMoney = storageProduct.getTotailMoney();            if(oldAmount < p.getAmount())            {                throw new InitialLackedException(p.getProduct().getName(), "此商品库存不足!");            }			storageProduct.setAmount(oldAmount - p.getAmount());            storageChangeLog.setChangedAmount(storageProduct.getAmount());            storageChangeLog.setChangedPrice(storageProduct.getPrice());			try			{				session.saveOrUpdate(storageProduct);                session.save(storageChangeLog);			}			catch(Exception ex)			{				transaction.rollback();				session.close();				throw new RuntimeException("无法保存!:" + ex.getMessage());			}		}		session.flush();		transaction.commit();		session.close();	}	public void passOutflowStorageForm(OutflowStoragePo po) throws InitialLackedException {        Session session = this.getHibernateTemplate().getSessionFactory().openSession();		Set<OutflowStorageDetailPo> details = po.getDetails();        List<Product> products = new ArrayList();        for(OutflowStorageDetailPo p:details)        {            products.add(p.getProduct());        }        List<StorageProductPo> storageProducts = this.findStorageProductPos(po.getStorage(), products);        Transaction transaction = session.beginTransaction();		for(OutflowStorageDetailPo p:details)		{			StorageProductPo storageProduct = this.findStorageProduct(storageProducts, p.getProduct());            StorageChangeLog storageChangeLog = new StorageChangeLog();            storageChangeLog.setCompany(po.getCompany());            storageChangeLog.setStorage(po.getStorage());            storageChangeLog.setProduct(p.getProduct());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setChangeType("库存报溢");//		Session session = this.getHibernateTemplate().getSessionFactory().openSession();//		Transaction transaction = session.beginTransaction();//		Set<OutflowStorageDetailPo> details = po.getDetails();//		for(OutflowStorageDetailPo p:details)//		{//			StorageProductPo storageProduct = this.findStorageProduct(po.getStorage(), p.getProduct());			if (storageProduct == null)			{				transaction.rollback();				session.close();				throw new InitialLackedException(p.getProduct().getName(), "此商品尚未期初!");			}            storageChangeLog.setCurrentAmount(storageProduct.getAmount());            storageChangeLog.setCurrentPrice(storageProduct.getPrice());			//业务部分			double oldAmount = storageProduct.getAmount();			//价格的计算方法,当前用平均法			double totailMoney = storageProduct.getTotailMoney() + p.getTotailMoney();			double newPrice = totailMoney / (oldAmount + p.getAmount());			storageProduct.setAmount(p.getAmount() + oldAmount);			storageProduct.setPrice(newPrice);            storageChangeLog.setChangedAmount(storageProduct.getAmount());            storageChangeLog.setChangedPrice(storageProduct.getPrice());			try			{				session.saveOrUpdate(storageProduct);                session.save(storageChangeLog);                //**************//liufei//                OutflowStorageDetailPo outflowStorageDetailPo = this.findOutflowStorageDetail(po.getStorage(), p.getProduct());//                if(outflowStorageDetailPo != null)//                {//                    outflowStorageDetailPo.setOldAmount(oldAmount + p.getAmount());//                    session.saveOrUpdate(outflowStorageDetailPo);//                }                //**************//			}			catch(Exception ex)			{				transaction.rollback();				session.close();				throw new RuntimeException("无法保存!:" + ex.getMessage());			}		}		session.flush();		transaction.commit();		session.close();	}	public void passPriceStorageForm(PriceStoragePo po) throws InitialLackedException {         Session session = this.getHibernateTemplate().getSessionFactory().openSession();		Set<PriceStorageDetailPo> details = po.getDetails();        List<Product> products = new ArrayList();        for(PriceStorageDetailPo p:details)        {            products.add(p.getProduct());        }        List<StorageProductPo> storageProducts = this.findStorageProductPos(po.getStorage(), products);        Transaction transaction = session.beginTransaction();		for(PriceStorageDetailPo p:details)		{			StorageProductPo storageProduct = this.findStorageProduct(storageProducts, p.getProduct());            StorageChangeLog storageChangeLog = new StorageChangeLog();            storageChangeLog.setCompany(po.getCompany());            storageChangeLog.setStorage(po.getStorage());            storageChangeLog.setProduct(p.getProduct());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setFormDate(po.getFormDate());            storageChangeLog.setFormNumber(po.getNumber());            storageChangeLog.setChangeType("库存变价");//		Session session = this.getHibernateTemplate().getSessionFactory().openSession();//		Transaction transaction = session.beginTransaction();//		Set<PriceStorageDetailPo> details = po.getDetails();//		for(PriceStorageDetailPo p:details)//		{//			StorageProductPo storageProduct = this.findStorageProduct(po.getStorage(), p.getProduct());			if (storageProduct == null)			{				transaction.rollback();				session.close();				throw new InitialLackedException(p.getProduct().getName(), "此商品尚未期初!");			}			//业务部分            storageChangeLog.setCurrentAmount(storageProduct.getAmount());            storageChangeLog.setCurrentPrice(storageProduct.getPrice());			double amount = storageProduct.getAmount();			storageProduct.setPrice(p.getPrice());            storageChangeLog.setChangedAmount(storageProduct.getAmount());            storageChangeLog.setChangedPrice(storageProduct.getPrice());			try			{				session.saveOrUpdate(storageProduct);                session.save(storageChangeLog);			}			catch(Exception ex)			{				transaction.rollback();				session.close();				throw new RuntimeException("无法保存!:" + ex.getMessage());			}		}		session.flush();		transaction.commit();		session.close();	}	public List<CheckStoragePo> findCheckStorageForms(StorageQueryVo vo) {		return this.findStorageForms(CheckStoragePo.class, vo);	}	public List<InStoragePo> findInStorageForms(StorageQueryVo vo)	{		return this.findStorageForms(InStoragePo.class, vo);	}	public List<InitialStoragePo> findInitialStorageForms(StorageQueryVo vo) {		return this.findStorageForms(InitialStoragePo.class, vo);	}	public List<LossStoragePo> findLossStorageForms(StorageQueryVo vo) {		return this.findStorageForms(LossStoragePo.class, vo);	}	public List<MinMaxStoragePo> findMinMaxStorageForms(StorageQueryVo vo) {		return this.findStorageForms(MinMaxStoragePo.class, vo);	}	public List<MoveStoragePo> findMoveStorageForms(StorageQueryVo vo) {		//to be added! outstorageid ->outstorage        List<MoveStoragePo> pos = this.findStorageForms(MoveStoragePo.class, vo);        for(MoveStoragePo p:pos)        {            p.setOutStorage(this.getStorages(p.getOutStorageId()));        }        return pos;	}	public List<OutStoragePo> findOutStorageForms(StorageQueryVo vo) {		return this.findStorageForms(OutStoragePo.class, vo);	}	public List<OutflowStoragePo> findOutflowStorageForms(StorageQueryVo vo) {		return this.findStorageForms(OutflowStoragePo.class, vo);	}	public List<PriceStoragePo> findPriceStorageForms(StorageQueryVo vo) {		return this.findStorageForms(PriceStoragePo.class, vo);	}	public List<StorageProductPo> findStorageProducts(StorageQueryVo vo) {		return this.findStorageProducts(StorageProductPo.class, vo);	}    public List<StorageChangeLog> findStorageChangeLog(StorageQueryVo vo)    {        return this.findStorageChangeLogs(StorageChangeLog.class, vo);    }    private List findStorageChangeLogs(Class clazz,StorageQueryVo vo)    {        String className = clazz.getName();		String sql = "from " + className + " as form where";		Vector objs = new Vector();		if (vo.getStorage() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.storage=? ";			objs.add(vo.getStorage());		}		if (vo.getCompany() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.company=? ";			objs.add(vo.getCompany());		}		if (vo.getStartDate() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.formDate>=? ";			objs.add(vo.getStartDate());		}		if (vo.getEndDate() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.formDate <=? ";			objs.add(vo.getEndDate());		}		if (vo.getProduct() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.product =? ";			objs.add(vo.getProduct());		}		return this.getHibernateTemplate().find(sql, objs.toArray());    }    private List findStorageProducts(Class clazz, StorageQueryVo vo)	{		String className = clazz.getName();		String sql = "from " + className + " as form where";		Vector objs = new Vector();		if (vo.getStorage() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.storage=? ";			objs.add(vo.getStorage());		}        if (vo.getStatus() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.storage.status=? ";			objs.add(vo.getStatus());		}		if (vo.getCompany() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.company=? ";			objs.add(vo.getCompany());		}		if (vo.getStartDate() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.mainObject.formDate>=? ";//liufei change			objs.add(vo.getStartDate());		}		if (vo.getEndDate() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.mainObject.formDate <=? ";//liufei change			objs.add(vo.getEndDate());		}        if (vo.getStartDatePo() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.formDate>=? ";//liufei change			objs.add(vo.getStartDatePo());		}		if (vo.getEndDatePo() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.formDate <=? ";//liufei change			objs.add(vo.getEndDatePo());		}		if (vo.getProduct() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.product =? ";			objs.add(vo.getProduct());		}		if (vo.getCatalogName() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.catalogName like ? ";			objs.add("%" + vo.getCatalogName() + "%");		}		if (vo.getProductName() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.name like ? ";			objs.add("%" + vo.getProductName() + "%");		}        if (vo.getEmployee() != null)//user058修改		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.employee=? ";			objs.add(vo.getEmployee());		}		//debug:		return this.getHibernateTemplate().find(sql, objs.toArray());	}	private List findStorageForms(Class clazz, StorageQueryVo vo)	{		String className = clazz.getName();		String sql = "from " + className + " as form where";		Vector objs = new Vector();        if(vo.getStatus() != null)        {            if(!sql.endsWith("where"))            {                sql += " and ";            }            sql += " form.status =? ";            objs.add(vo.getStatus());        }		if (vo.getStorage() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.storage=? ";			objs.add(vo.getStorage());		}		if (vo.getCompany() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.company=? ";			objs.add(vo.getCompany());		}		if (vo.getStartDate() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.mainObject.formDate>=? ";//liufei change			objs.add(vo.getStartDate());		}		if (vo.getEndDate() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.mainObject.formDate <=? ";//liufei change			objs.add(vo.getEndDate());		}        if (vo.getStartDatePo() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.formDate>=? ";//liufei change			objs.add(vo.getStartDatePo());		}		if (vo.getEndDatePo() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.formDate <=? ";//liufei change			objs.add(vo.getEndDatePo());		}        		if (vo.getProduct() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.product =? ";			objs.add(vo.getProduct());		}		if (vo.getCatalogName() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.catalogName like ? ";			objs.add("%" + vo.getCatalogName() + "%");		}		if (vo.getProductName() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.name like ? ";			objs.add("%" + vo.getProductName() + "%");		}        if (vo.getEmployee() != null)//user058修改		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.employee=? ";			objs.add(vo.getEmployee());		}		//debug:		return this.getHibernateTemplate().find(sql, objs.toArray());	}    private List findStorageDetailForms(Class clazz, StorageQueryVo vo)	{		String className = clazz.getName();		String sql = "from " + className + " as form where form.mainObject.status = 1";		Vector objs = new Vector();		if (vo.getStorage() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.mainObject.storage=? ";			objs.add(vo.getStorage());		}		if (vo.getCompany() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.mainObject.company=? ";			objs.add(vo.getCompany());		}		if (vo.getStartDate() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.mainObject.formDate>=? ";//liufei change			objs.add(vo.getStartDate());		}		if (vo.getEndDate() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.mainObject.formDate <=? ";//liufei change			objs.add(vo.getEndDate());		}		if (vo.getProduct() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.product =? ";			objs.add(vo.getProduct());		}		if (vo.getCatalogName() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.catalogName like ? ";			objs.add("%" + vo.getCatalogName() + "%");		}		if (vo.getProductName() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.name like ? ";			objs.add("%" + vo.getProductName() + "%");		}        if (vo.getEmployee() != null)//user058修改		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.mainObject.employee=? ";			objs.add(vo.getEmployee());		}		//debug:		return this.getHibernateTemplate().find(sql, objs.toArray());	}    private List findDataBases(Class clazz, DataBaseQueryVO vo)	{		String className = clazz.getName();		String sql = "from " + className + " as form where";		Vector objs = new Vector();		if (vo.getCompany() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.company=? ";			objs.add(vo.getCompany());		}		if (vo.getNumber() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.number=? ";			objs.add(vo.getNumber());		}		if (vo.getName() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.name like ? ";//liufei change			objs.add("%" + vo.getName() + "%");		}		if (vo.getShortName() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.shortName like ? ";			objs.add("%" + vo.getShortName() + "%");		}		if (vo.getCatalog() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.catalog.name like ? ";			objs.add("%" + vo.getCatalog() + "%");		}		if (vo.getCode() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.code like ? ";			objs.add("%" + vo.getCode() + "%");		}        if (vo.getBarCode() != null)		{			if (!sql.endsWith("where"))			{				sql += " and ";			}			sql += " form.barCode like ? ";			objs.add("%" + vo.getBarCode() + "%");		}//        if (vo.getCustomerType() != null)//		{//			if (!sql.endsWith("where"))//			{//				sql += " and ";//			}//			sql += " form.customerType like ? ";//			objs.add("%" + vo.getCustomerType() + "%");//		}		//debug:		return this.getHibernateTemplate().find(sql, objs.toArray());	}    public List<Product> findProducts(DataBaseQueryVO vo)    {        return this.findDataBases(Product.class, vo);    }    public List<Customer> findCustomers(DataBaseQueryVO vo)    {        return this.findDataBases(Customer.class, vo);    }    public List<Employee> findEmployees(DataBaseQueryVO vo)    {        return this.findDataBases(Employee.class, vo);    }	public List<InStorageDetailPo> findInStorageDetails(StorageQueryVo vo) {		return this.findStorageDetailForms(InStorageDetailPo.class, vo);	}	public List<InitialStorageDetailPo> findInitialStorageDetails(StorageQueryVo vo) {		return this.findStorageDetailForms(InitialStorageDetailPo.class, vo);	}	public List<LossStorageDetailPo> findLossStorageDetails(StorageQueryVo vo) {		return this.findStorageDetailForms(LossStorageDetailPo.class, vo);	}	public List<MinMaxStorageDetailPo> findMinMaxStorageDetails(StorageQueryVo vo) {		return this.findStorageDetailForms(MinMaxStorageDetailPo.class, vo);	}	public List<MoveStorageDetailPo> findMoveStorageDetails(StorageQueryVo vo)    {        List<MoveStorageDetailPo> pos = this.findStorageDetailForms(MoveStorageDetailPo.class, vo);        for(MoveStorageDetailPo p:pos)        {            p.setOutStorage(this.getStorages(p.getMainObject().getOutStorageId()));        }		return pos;	}	public List<OutStorageDetailPo> findOutStorageDetails(StorageQueryVo vo) {		return this.findStorageDetailForms(OutStorageDetailPo.class, vo);	}	public List<OutflowStorageDetailPo> findOutflowStorageDetails(StorageQueryVo vo) {		return this.findStorageDetailForms(OutflowStorageDetailPo.class, vo);	}	public List<PriceStorageDetailPo> findPriceStorageDetails(StorageQueryVo vo) {		return this.findStorageDetailForms(PriceStorageDetailPo.class, vo);	}    public LossStorageDetailPo findLossStorageDetail(Storage storage, int productId)//liufei    {        List<LossStorageDetailPo> lossStorageDetailPos = this.getHibernateTemplate().find("from LossStorageDetailPo as po where po.mainObject.storage =? and po.productId=?", new Object[]{storage, productId});        if (lossStorageDetailPos != null && lossStorageDetailPos.size() > 0)		{			return lossStorageDetailPos.get(0);		}		return null;    }    public OutflowStorageDetailPo findOutflowStorageDetail(Storage storage, int productId)//liufei    {        List<OutflowStorageDetailPo> outflowStorageDetailPos = this.getHibernateTemplate().find("from OutflowStorageDetailPo as po where po.mainObject.storage =? and po.productId=?", new Object[]{storage, productId});		if (outflowStorageDetailPos != null && outflowStorageDetailPos.size() > 0)		{			return outflowStorageDetailPos.get(0);		}		return null;    }    public CheckStorageDetailPo findCheckStorageDetail(Storage storage, int productId)//liufei    {        List<CheckStorageDetailPo> checkStorageDetailPos = this.getHibernateTemplate().find("from CheckStorageDetailPo as po where po.mainObject.storage =? and po.productId=?", new Object[]{storage, productId});        if (checkStorageDetailPos != null && checkStorageDetailPos.size() > 0)		{			return checkStorageDetailPos.get(0);		}		return null;    }    public void saveLossStorageDetail(LossStorageDetailPo lossStorageDetailPo)//liufei    {        this.getHibernateTemplate().saveOrUpdate(lossStorageDetailPo);    }    public void saveOutflowStorageDetail(OutflowStorageDetailPo outflowStorageDetailPo)//liufei    {        this.getHibernateTemplate().saveOrUpdate(outflowStorageDetailPo);    }    public void saveCheckStorageDetail(CheckStorageDetailPo checkStorageDetailPo)//liufei    {        this.getHibernateTemplate().saveOrUpdate(checkStorageDetailPo);    }    public List<CheckStorageDetailPo> findCheckStorageDetails(StorageQueryVo vo) {      return this.findStorageDetailForms(CheckStorageDetailPo.class, vo);    }    public boolean isExitProductCatalog(Company company, String catalogNumber)//liufei    {        List<ProductCatalog> catalog = this.getHibernateTemplate().find("from ProductCatalog as catalog where catalog.company=? and catalog.number=? ", new Object[]{company,catalogNumber});        if(catalog != null && catalog.size() > 0)            return true;        return false;    }        public boolean isExitCustomerCatalog(Company company, String catalogNumber)//liufei    {        List<CustomerCatalog> catalog = this.getHibernateTemplate().find("from CustomerCatalog as catalog where catalog.company=? and catalog.number=? ", new Object[]{company,catalogNumber});        if(catalog != null && catalog.size() > 0)            return true;        return false;    }        public boolean isExitEmployeeCatalog(Company company, String catalogNumber)//liufei    {        List<EmployeeCatalog> catalog = this.getHibernateTemplate().find("from EmployeeCatalog as catalog where catalog.company=? and catalog.number=? ", new Object[]{company,catalogNumber});        if(catalog != null && catalog.size() > 0)            return true;        return false;    }     public Product getProduct(Company company, int id)     {         List<Product>  product  =this.getHibernateTemplate().find("from Product as product where product.company =? and product.id =? ", new Object[]{company,id});         Product pc =product.get(0);         return  pc;     }     public Employee getEmployee(int employeeID)     {         List<Employee>  employees  =this.getHibernateTemplate().find("from Employee as e where e.id =? ", new Object[]{employeeID});         Employee e = employees.get(0);         return  e;     }     public List<StorageAlertPo> findStorageAlertPos(Company company)     {         List<StorageAlertPo> pos = this.getHibernateTemplate().find("from StorageAlertPo as po where po.company=? ", new Object[]{company});         List<StorageAlertPo> storageAlertPos = new ArrayList<StorageAlertPo>();         for(StorageAlertPo po : pos)         {             StorageProductPo storageProduct = this.findStorageProduct(po.getStorage(), po.getProduct());             if(storageProduct != null)             {                 if(storageProduct.getAmount() > po.getMaxAmount() || storageProduct.getAmount() < po.getMinAmount())                 {                     po.setAmount(storageProduct.getAmount());                     po.setTotalMoney(storageProduct.getTotailMoney());                     storageAlertPos.add(po);                 }             }         }         return storageAlertPos;     }    public double getDocumentsTotalMoney(Product product,Company company) {   List<StorageProductPo>   s =this.getHibernateTemplate().find("from StorageProductPo as s where s.company =? and s.product=?", new Object[]{company,product});       return s.get(0).getPrice();    }    public void saveStorageAlertPo(StorageAlertPo po)    {        this.getHibernateTemplate().saveOrUpdate(po);    }    public void saveStorageProductPo(StorageProductPo po)    {        this.getHibernateTemplate().saveOrUpdate(po);    }}