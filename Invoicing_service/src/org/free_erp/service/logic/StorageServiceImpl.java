/* * Copyright 2013, TengJianfa , and other individual contributors as indicated * by the @authors tag. See the copyright.txt in the distribution for a * full listing of individual contributors. * * This is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as * published by the Free Software Foundation; either version 2.1 of * the License, or (at your option) any later version. * * This software is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this software; if not, write to the Free * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA * 02110-1301 USA, or see the FSF site: http://www.fsf.org. */package org.free_erp.service.logic;import java.util.List;import java.util.ArrayList;import java.util.Set;import org.free_erp.service.constants.NumberConstants;import org.free_erp.service.constants.ServiceConstants;import org.free_erp.service.dao.base.IStorageDao;import org.free_erp.service.entity.base.Company;import org.free_erp.service.entity.base.Product;import org.free_erp.service.entity.base.Storage;import org.free_erp.service.entity.purchase.PurchaseBackDetailPo;import org.free_erp.service.entity.purchase.PurchaseBackPo;import org.free_erp.service.entity.purchase.PurchaseOrderDetailPo;import org.free_erp.service.entity.purchase.PurchaseOrderPo;import org.free_erp.service.entity.sale.SaleDetailPo;import org.free_erp.service.entity.sale.SaleOrderBackDetailPo;import org.free_erp.service.entity.sale.SaleOrderBackPo;import org.free_erp.service.entity.sale.SalePo;import org.free_erp.service.entity.storage.CheckStorageDetailPo;import org.free_erp.service.entity.storage.CheckStoragePo;import org.free_erp.service.entity.storage.InStorageDetailPo;import org.free_erp.service.entity.storage.InStoragePo;import org.free_erp.service.entity.storage.InitialStorageDetailPo;import org.free_erp.service.entity.storage.InitialStoragePo;import org.free_erp.service.entity.storage.LossStorageDetailPo;import org.free_erp.service.entity.storage.LossStoragePo;import org.free_erp.service.entity.storage.MinMaxStorageDetailPo;import org.free_erp.service.entity.storage.MinMaxStoragePo;import org.free_erp.service.entity.storage.MoveStorageDetailPo;import org.free_erp.service.entity.storage.MoveStoragePo;import org.free_erp.service.entity.storage.OutStorageDetailPo;import org.free_erp.service.entity.storage.OutStoragePo;import org.free_erp.service.entity.storage.OutflowStorageDetailPo;import org.free_erp.service.entity.storage.OutflowStoragePo;import org.free_erp.service.entity.storage.PriceStorageDetailPo;import org.free_erp.service.entity.storage.PriceStoragePo;import org.free_erp.service.entity.storage.StorageAlertPo;import org.free_erp.service.entity.storage.StorageChangeLog;import org.free_erp.service.entity.storage.StorageProductPo;import org.free_erp.service.entity.vo.StorageQueryVo;import org.free_erp.service.exception.InitialLackedException;import org.free_erp.service.exception.LogicException;import org.free_erp.service.exception.ProductInitializedException;public class StorageServiceImpl implements IStorageService {    private IStorageDao dao;    private ISystemManageService systemManageService;    public ISystemManageService getSystemManageService() {        return systemManageService;    }    public void setSystemManageService(ISystemManageService systemManageService) {        this.systemManageService = systemManageService;    }    public Storage getStorage(int id)    {        return this.dao.findStorage(id);    }    public void addStorage(Storage storage) {        if (storage.getNumber() == null || storage.getNumber().equals("")) {            String number = systemManageService.getOptionType(storage.getCompany(), NumberConstants.STO_NUM) + systemManageService.getAutoNumber(storage.getCompany(), NumberConstants.STO_NUM);            storage.setNumber(number);        }        ServiceUtilities.addDateInfo(storage);        this.dao.saveStorage(storage);    }    public List<Storage> getStorages(Company company) {        return this.dao.findStorages(company);    }    public List<Storage> getUsableStorages(Company company)//liufei    {        return this.dao.findUsableStorages(company);    }    public void modifiyStorage(Storage storage) {        ServiceUtilities.addDateInfo(storage);        this.dao.saveStorage(storage);    }    public void removeStorage(Storage storage) {        try {            this.dao.deleteStorage(storage);        } catch (Exception ex) {            throw new LogicException("该仓库存在于其它单据中，不能被删除!");        }    }    public void saveStorage(Storage storage) {        if (storage.getNumber() == null || storage.getNumber().equals("")) {            String number = systemManageService.getOptionType(storage.getCompany(), NumberConstants.STO_NUM) + systemManageService.getAutoNumber(storage.getCompany(), NumberConstants.STO_NUM);            storage.setNumber(number);        }        ServiceUtilities.addDateInfo(storage);        this.dao.saveStorage(storage);    }    public void saveStorageAlertPo(StorageAlertPo po)    {        this.dao.saveStorageAlert(po);    }    public void saveStorageProductPo(StorageProductPo po)    {        this.dao.saveStorageProductPo(po);    }    public IStorageDao getDao() {        return dao;    }    public void setDao(IStorageDao dao) {        this.dao = dao;    }    public List<InStoragePo> getAllDraftInStorageForms(Company company) {        List<InStoragePo> forms = this.getAllDraftInStorageForms(company);        for (InStoragePo po : forms) {            //po.getStatus()  //to be added!        }        return forms;    }    public List<InStoragePo> getAllInStorageForms(Company company) {        return this.dao.findInStorages(company);    }    public void saveInStorageForm(InStoragePo po) {        if (po.getNumber() == null || po.getNumber().equals(" ")) {            String number = systemManageService.getAutomaticNumber(po.getCompany(), NumberConstants.IN_STO_NUM);            po.setNumber(number);        }        ServiceUtilities.addDateInfo(po);        this.dao.saveInStorageForm(po);    }    public void deleteInStorageForm(InStoragePo po) {        this.dao.deleteInStorageForm(po);    }    public void deleteInitialStorageForm(InitialStoragePo po) {        this.dao.deleteInitialStorageForm(po);    }    public void deleteLossStorageForm(LossStoragePo po) {        this.dao.deleteLossStorageForm(po);    }    public void deleteMinMaxStorageForm(MinMaxStoragePo po) {        this.dao.deleteMinMaxStorageForm(po);    }    public void deleteMoveStorageForm(MoveStoragePo po) {        this.dao.deleteMoveStorageForm(po);    }    public void deleteOutStorageForm(OutStoragePo po) {        this.dao.deleteOutStorageForm(po);    }    public void deleteOutflowStorageForm(OutflowStoragePo po) {        this.dao.deleteOutflowStorageForm(po);    }    public void deletePriceStorageForm(PriceStoragePo po) {        this.dao.deletePriceStorageForm(po);    }    public List<InitialStoragePo> getAllDraftInitialStorageForms(Company company) {        return new ArrayList();    }    public List<LossStoragePo> getAllDraftLossStorageForms(Company company) {        return new ArrayList();    }    public List<MinMaxStoragePo> getAllDraftMinMaxStorageForms(Company company) {        return new ArrayList();    }    public List<MoveStoragePo> getAllDraftMoveStorageForms(Company company) {        return new ArrayList();    }    public List<OutStoragePo> getAllDraftOutStorageForms(Company company) {        return new ArrayList();    }    public List<OutflowStoragePo> getAllDraftOutflowStorageForms(Company company) {        return new ArrayList();    }    public List<PriceStoragePo> getAllDraftPriceStorageForms(Company company) {        return new ArrayList();    }    public List<InitialStoragePo> getAllInitialStorageForms(Company company) {        return this.dao.getAllInitialStorageForms(company);    }    public List<LossStoragePo> getAllLossStorageForms(Company company) {        return this.dao.getAllLossStorageForms(company);    }    public List<MinMaxStoragePo> getAllMinMaxStorageForms(Company company) {        return this.dao.getAllMinMaxStorageForms(company);    }    public List<MoveStoragePo> getAllMoveStorageForms(Company company) {        return this.dao.getAllMoveStorageForms(company);    }    public List<OutStoragePo> getAllOutStorageForms(Company company) {        return this.dao.getAllOutStorageForms(company);    }    public List<OutflowStoragePo> getAllOutflowStorageForms(Company company) {        return this.dao.getAllOutflowStorageForms(company);    }    public List<PriceStoragePo> getAllPriceStorageForms(Company company) {        return this.dao.getAllPriceStorageForms(company);    }    public void saveInitialStorageForm(InitialStoragePo po) {        if (po.getNumber() == null || po.getNumber().equals(" ")) {            String number = systemManageService.getAutomaticNumber(po.getCompany(), NumberConstants.INIT_STO_NUM);            po.setNumber(number);        }        ServiceUtilities.addDateInfo(po);        for (InitialStorageDetailPo p : po.getDetails()) {            ServiceUtilities.addDateInfo(p);        }        this.dao.saveInitialStorageForm(po);    }    public void saveLossStorageForm(LossStoragePo po) {        if (po.getNumber() == null || po.getNumber().equals(" ")) {            String number = systemManageService.getAutomaticNumber(po.getCompany(), NumberConstants.LOSS_NUM);            po.setNumber(number);        }        ServiceUtilities.addDateInfo(po);        for (LossStorageDetailPo p : po.getDetails()) {            ServiceUtilities.addDateInfo(p);        }        this.dao.saveLossStorageForm(po);    }    public void saveMinMaxStorageForm(MinMaxStoragePo po) {        if (po.getNumber() == null || po.getNumber().equals(" ")) {            String number = systemManageService.getAutomaticNumber(po.getCompany(), NumberConstants.MIN_MAX_NUM);            po.setNumber(number);        }        ServiceUtilities.addDateInfo(po);        for (MinMaxStorageDetailPo p : po.getDetails()) {            ServiceUtilities.addDateInfo(p);        }        this.dao.saveMinMaxStorageForm(po);    }    public void saveMoveStorageForm(MoveStoragePo po) {        if (po.getNumber() == null || po.getNumber().equals(" ")) {            String number = systemManageService.getAutomaticNumber(po.getCompany(), NumberConstants.MOVE_NUM);            po.setNumber(number);        }        ServiceUtilities.addDateInfo(po);        for (MoveStorageDetailPo p : po.getDetails()) {            ServiceUtilities.addDateInfo(p);        }        this.dao.saveMoveStorageForm(po);    }    public void saveOutStorageForm(OutStoragePo po) {        if (po.getNumber() == null || po.getNumber().equals(" ")) {            String number = systemManageService.getAutomaticNumber(po.getCompany(), NumberConstants.OUT_STO_NUM);            po.setNumber(number);        }        ServiceUtilities.addDateInfo(po);        for (OutStorageDetailPo p : po.getDetails()) {            ServiceUtilities.addDateInfo(p);        }        this.dao.saveOutStorageForm(po);    }    public void saveOutflowStorageForm(OutflowStoragePo po) {        if (po.getNumber() == null || po.getNumber().equals(" ")) {            String number = systemManageService.getAutomaticNumber(po.getCompany(), NumberConstants.OUT_FLOW_NUM);            po.setNumber(number);        }        ServiceUtilities.addDateInfo(po);        for (OutflowStorageDetailPo p : po.getDetails()) {            ServiceUtilities.addDateInfo(p);        }        this.dao.saveOutflowStorageForm(po);    }    public void savePriceStorageForm(PriceStoragePo po) {        if (po.getNumber() == null || po.getNumber().equals(" ")) {            String number = systemManageService.getAutomaticNumber(po.getCompany(), NumberConstants.CHANGE_NUM);            po.setNumber(number);        }        ServiceUtilities.addDateInfo(po);        for (PriceStorageDetailPo p : po.getDetails()) {            ServiceUtilities.addDateInfo(p);        }        this.dao.savePriceStorageForm(po);    }    public void deleteCheckStorageForm(CheckStoragePo po) {        this.dao.deleteCheckStorage(po);    }    public List<CheckStoragePo> getAllCheckStorageForms(Company company) {        return this.dao.getAllCheckStorages(company);    }    public List<CheckStoragePo> getAllDraftCheckStorageForms(Company company) {        throw new UnsupportedOperationException("Not supported yet.");    }    public void saveCheckStorageForm(CheckStoragePo po) {        if (po.getNumber() == null || po.getNumber().equals(" ")) {            String number = systemManageService.getAutomaticNumber(po.getCompany(), NumberConstants.CHECK_NUM);            po.setNumber(number);        }        ServiceUtilities.addDateInfo(po);        for (CheckStorageDetailPo p : po.getDetails()) {            ServiceUtilities.addDateInfo(p);        }        this.dao.saveCheckStorage(po);    }    public void passCheckForm(CheckStoragePo po) throws InitialLackedException {        this.dao.passCheckForm(po);        po.setStatus(ServiceConstants.FORMAL_STATUS);        this.saveCheckStorageForm(po);    }    public void passInStorageForm(InStoragePo po) throws InitialLackedException {        this.dao.passInStorageForm(po);        po.setStatus(ServiceConstants.FORMAL_STATUS);        this.dao.saveInStorageForm(po);    }    public void passInitialStorageForm(InitialStoragePo po) throws ProductInitializedException {        this.dao.passInitialStorageForm(po);        po.setStatus(ServiceConstants.FORMAL_STATUS);        this.dao.saveInitialStorageForm(po);    }    public void passLossStorageForm(LossStoragePo po) throws InitialLackedException {        this.dao.passLossStorageForm(po);        po.setStatus(ServiceConstants.FORMAL_STATUS);        this.dao.saveLossStorageForm(po);    }    public void passMinMaxStorageForm(MinMaxStoragePo po) throws InitialLackedException {        this.dao.passMinMaxStorageForm(po);        po.setStatus(ServiceConstants.FORMAL_STATUS);        this.dao.saveMinMaxStorageForm(po);    }    public void passMoveStorageForm(MoveStoragePo po) throws InitialLackedException {        this.dao.passMoveStorageForm(po);        po.setStatus(ServiceConstants.FORMAL_STATUS);        this.dao.saveMoveStorageForm(po);    }    public void passOutStorageForm(OutStoragePo po) throws InitialLackedException {        this.dao.passOutStorageForm(po);        po.setStatus(ServiceConstants.FORMAL_STATUS);        this.dao.saveOutStorageForm(po);    }    public void passOutflowStorageForm(OutflowStoragePo po) throws InitialLackedException {        this.dao.passOutflowStorageForm(po);        po.setStatus(ServiceConstants.FORMAL_STATUS);        this.dao.saveOutflowStorageForm(po);    }    public void passPriceStorageForm(PriceStoragePo po) throws InitialLackedException {        this.dao.passPriceStorageForm(po);        po.setStatus(ServiceConstants.FORMAL_STATUS);        this.dao.savePriceStorageForm(po);    }    public void passCommonStorageForm(Object po) throws InitialLackedException, ProductInitializedException {        if (po instanceof CheckStoragePo) {            this.passCheckForm((CheckStoragePo) po);        } else if (po instanceof InStoragePo) {            this.passInStorageForm((InStoragePo) po);        } else if (po instanceof InitialStoragePo) {            this.passInitialStorageForm((InitialStoragePo) po);        } else if (po instanceof LossStoragePo) {            this.passLossStorageForm((LossStoragePo) po);        } else if (po instanceof MinMaxStoragePo) {            this.passMinMaxStorageForm((MinMaxStoragePo) po);        } else if (po instanceof MoveStoragePo) {            this.passMoveStorageForm((MoveStoragePo) po);        } else if (po instanceof OutStoragePo) {            this.passOutStorageForm((OutStoragePo) po);        } else if (po instanceof OutflowStoragePo) {            this.passOutflowStorageForm((OutflowStoragePo) po);        } else if (po instanceof PriceStoragePo) {            this.passPriceStorageForm((PriceStoragePo) po);        }    }    public List<CheckStoragePo> findCheckStorageForms(StorageQueryVo vo) {        return this.dao.findCheckStorageForms(vo);    }    public List<InStoragePo> findInStorageForms(StorageQueryVo vo) {        return this.dao.findInStorageForms(vo);    }    public List<InitialStoragePo> findInitialStorageForms(StorageQueryVo vo) {        return this.dao.findInitialStorageForms(vo);    }    public List<LossStoragePo> findLossStorageForms(StorageQueryVo vo) {        return this.dao.findLossStorageForms(vo);    }    public List<MinMaxStoragePo> findMinMaxStorageForms(StorageQueryVo vo) {        return this.dao.findMinMaxStorageForms(vo);    }    public List<MoveStoragePo> findMoveStorageForms(StorageQueryVo vo) {        return this.dao.findMoveStorageForms(vo);    }    public List<OutStoragePo> findOutStorageForms(StorageQueryVo vo) {        return this.dao.findOutStorageForms(vo);    }    public List<OutflowStoragePo> findOutflowStorageForms(StorageQueryVo vo) {        return this.dao.findOutflowStorageForms(vo);    }    public List<PriceStoragePo> findPriceStorageForms(StorageQueryVo vo) {        return this.dao.findPriceStorageForms(vo);    }    public List<StorageProductPo> findStorageProductForms(StorageQueryVo vo) {        return this.dao.findStorageProducts(vo);    }    public List<StorageChangeLog> findStorageChangeLog(StorageQueryVo vo)    {        return (List<StorageChangeLog>)this.dao.findStorageChangeLog(vo);    }    public List<InStorageDetailPo> findInStorageDetails(StorageQueryVo vo) {        return this.dao.findInStorageDetails(vo);    }    public List<InitialStorageDetailPo> findInitialStorageDetails(StorageQueryVo vo) {        return this.dao.findInitialStorageDetails(vo);    }    public List<LossStorageDetailPo> findLossStorageDetails(StorageQueryVo vo) {        return this.dao.findLossStorageDetails(vo);    }    public List<MinMaxStorageDetailPo> findMinMaxStorageDetails(StorageQueryVo vo) {        return this.dao.findMinMaxStorageDetails(vo);    }    public List<MoveStorageDetailPo> findMoveStorageDetails(StorageQueryVo vo) {        return this.dao.findMoveStorageDetails(vo);    }    public List<OutStorageDetailPo> findOutStorageDetails(StorageQueryVo vo) {        return this.dao.findOutStorageDetails(vo);    }    public List<OutflowStorageDetailPo> findOutflowStorageDetails(StorageQueryVo vo) {        return this.dao.findOutflowStorageDetails(vo);    }    public List<PriceStorageDetailPo> findPriceStorageDetails(StorageQueryVo vo) {        return this.dao.findPriceStorageDetails(vo);    }    public double getStorageProductAmount(Storage storage, Product product)//liufei    {        StorageProductPo storageProductPo = this.dao.findStorageProduct(storage, product);        if (storageProductPo != null) {            return storageProductPo.getAmount();        }        return 0d;    }    public double getStorageStockPrice(Storage storage, Product product)//liufei    {        StorageProductPo storageProductPo = this.dao.findStorageProduct(storage, product);        if (storageProductPo != null) {            return storageProductPo.getPrice();        }        return 0d;    }    public String getStorageStockShelf(Storage storage, Product product)//liufei    {        StorageProductPo storageProductPo = this.dao.findStorageProduct(storage, product);        if (storageProductPo != null) {            return storageProductPo.getShelf();        }        return "";    }    public List<CheckStorageDetailPo> findCheckStorageDetails(StorageQueryVo vo) {        return this.dao.findCheckStorageDetails(vo);    }    public List<StorageProductPo> findAllStorageProduct(Storage storage) {        return this.dao.findAllStorageProduct(storage);    }    public List<StorageAlertPo> findStorageAlertPos(Company company) {        return this.dao.findStorageAlertPos(company);    }    public double getStockTotalMoney(Company company) {        double totalMoney = 0d;        List<StorageProductPo> pos = this.dao.findAllStorageProduct(company);        for (StorageProductPo po : pos) {            totalMoney += po.getTotailMoney();        }        return totalMoney;    }    public double getDocumentsTotalMoney(Object po) {        Double documentsTotalMoney = 0d;        if (po instanceof SalePo) {            SalePo s = (SalePo) po;            Set<SaleDetailPo> sd = s.getDetails();            for (SaleDetailPo d : sd) {                documentsTotalMoney += this.dao.getDocumentsTotalMoney(d.getProduct(), s.getCompany())*d.getAmount();            }        } else if (po instanceof SaleOrderBackPo) {            SaleOrderBackPo sb = (SaleOrderBackPo) po;            Set<SaleOrderBackDetailPo> sd = sb.getDetails();            for (SaleOrderBackDetailPo d : sd) {                documentsTotalMoney += this.dao.getDocumentsTotalMoney(d.getProduct(), sb.getCompany())*d.getAmount();            }        } else if (po instanceof PurchaseOrderPo) {            PurchaseOrderPo p = (PurchaseOrderPo) po;             Set<PurchaseOrderDetailPo> sd = p.getDetails();            for (PurchaseOrderDetailPo d : sd) {                documentsTotalMoney += this.dao.getDocumentsTotalMoney(d.getProduct(), p.getCompany())*d.getAmount();            }        } else if (po instanceof PurchaseBackPo) {            PurchaseBackPo pb = (PurchaseBackPo) po;             Set<PurchaseBackDetailPo> sd = pb.getDetails();            for (PurchaseBackDetailPo d : sd) {                documentsTotalMoney += this.dao.getDocumentsTotalMoney(d.getProduct(), pb.getCompany())*d.getAmount();            }        }        return documentsTotalMoney;    }}